{
  "address": "0x43a6550B66C4Fc9C8256b43727617a4FfCc5EF7B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getDecimal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwo",
          "type": "address"
        }
      ],
      "name": "getPairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1_address",
          "type": "address"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniSwapRouter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ddc8b53c36bc0a032f0daad2dda48ddbdc6ccef74a627abbd0d636499134676",
  "receipt": {
    "to": null,
    "from": "0xE5aD97f1731174D14A71D43Bd06E94a1D3e59A4a",
    "contractAddress": "0x43a6550B66C4Fc9C8256b43727617a4FfCc5EF7B",
    "transactionIndex": 0,
    "gasUsed": "45600460",
    "logsBloom": "0x
    "blockHash": "0xff876833482e066580e771a33c4d9895c32c551757b2fe6aadd597d8493e1df7",
    "transactionHash": "0x9ddc8b53c36bc0a032f0daad2dda48ddbdc6ccef74a627abbd0d636499134676",
    "logs": [],
    "blockNumber": 150163205,
    "cumulativeGasUsed": "45600460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "77d8a7f926aaf644c8ba61d719f8b8d7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwo\",\"type\":\"address\"}],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_address\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniSwapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTokenPrice(address,address)\":{\"params\":{\"token1_address\":\"address of USDT token contract\",\"token_address\":\"address of BEP20 token contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenPrice(address,address)\":{\"notice\":\"Returns the USD price for a particular BEP20 token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n    function initialize(address _uniSwapRouter) external;\\r\\n\\r\\n    function getDecimal(address tokenAddress) external view returns (uint256);\\r\\n\\r\\n    function getTokenPrice(address token_address, address token1_address)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x63d33ae084eeeba97f1f95f0cb675fad1a64cfb6d9d1102930b6405085fbd05a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4 || ^0.7.6 || ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n}\\r\\n\",\"keccak256\":\"0x5d28c54ac58d6626eba8804c9dac8ee7a8d91d6cce7a35396584dc292c096264\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n\\r\\n  function symbol() external pure returns (string memory);\\r\\n\\r\\n  function decimals() external pure returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n  function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint);\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n  event Swap(\\r\\n    address indexed sender,\\r\\n    uint amount0In,\\r\\n    uint amount1In,\\r\\n    uint amount0Out,\\r\\n    uint amount1Out,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n  function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n  function kLast() external view returns (uint);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc5b1132e41f888128b44fa468d22d0174fdc6e248bc26c52fdedd5680f70e523\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function WETH() external view returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint amountADesired,\\r\\n    uint amountBDesired,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint amountTokenDesired,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint amountOut,\\r\\n    uint amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n\\r\\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  payable\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  payable\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\r\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountETH);\\r\\n\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable;\\r\\n\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0efee2fe0c870c85cccf46bab495decb2d9c5d0adc70c69c10a80a4e6e871ff7\",\"license\":\"UNLICENSED\"},\"contracts/oracle/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\r\\n\\r\\ncontract PriceOracle is IPriceOracle {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    function initialize(address _uniSwapRouter) external override {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            _uniSwapRouter\\r\\n        );\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n    }\\r\\n\\r\\n    function getPairAddress(address _assetOne, address _assetTwo)\\r\\n        public\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        address pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(\\r\\n            _assetOne,\\r\\n            _assetTwo\\r\\n        );\\r\\n        return pair;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fetches and sorts the reserves for a pair.\\r\\n     * @param tokenA Address of tokenA contract\\r\\n     * @param tokenB Address of tokenB contract\\r\\n     */\\r\\n\\r\\n    function getReserves(address tokenA, address tokenB)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 reserveA, uint256 reserveB)\\r\\n    {\\r\\n        address pair = getPairAddress(tokenA, tokenB);\\r\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair)\\r\\n            .getReserves();\\r\\n\\r\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\r\\n        (reserveA, reserveB) = tokenA == token0\\r\\n            ? (reserve0, reserve1)\\r\\n            : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns sorted token addresses, used to handle return values from pairs sorted in this order.\\r\\n     * @param tokenA Address of tokenA contract\\r\\n     * @param tokenB Address of tokenB contract\\r\\n     */\\r\\n\\r\\n    function sortTokens(address tokenA, address tokenB)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address token0, address token1)\\r\\n    {\\r\\n        require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\r\\n        (token0, token1) = tokenA < tokenB\\r\\n            ? (tokenA, tokenB)\\r\\n            : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\r\\n    }\\r\\n\\r\\n    function getDecimal(address tokenAddress)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return IERC20Metadata(tokenAddress).decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n\\r\\n     * @notice Returns the USD price for a particular BEP20 token.\\r\\n     * @param token_address address of BEP20 token contract\\r\\n     * @param token1_address address of USDT token contract\\r\\n     */\\r\\n    function getTokenPrice(address token_address, address token1_address)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 price)\\r\\n    {\\r\\n        uint256 token_decimals = IERC20Metadata(token_address).decimals();\\r\\n        uint256 min_amountIn = 1 * 10**token_decimals;\\r\\n        if (token_address == token1_address) {\\r\\n            price = min_amountIn;\\r\\n        } else {\\r\\n            (uint256 reserve0, uint256 reserve1) = getReserves(\\r\\n                token_address,\\r\\n                token1_address\\r\\n            );\\r\\n            price = uniswapV2Router.getAmountOut(\\r\\n                min_amountIn,\\r\\n                reserve0,\\r\\n                reserve1\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x325a53729339734783c5b8a773e7140a710293848378012e17ff56944bec78c0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e40806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631694505e1461005c578063966da2b81461007a578063afa99860146100aa578063b4f69a2f146100da578063c4d66de81461010a575b600080fd5b610064610126565b60405161007191906109be565b60405180910390f35b610094600480360381019061008f91906107c0565b61014a565b6040516100a19190610a19565b60405180910390f35b6100c460048036038101906100bf919061081a565b6101d4565b6040516100d19190610a19565b60405180910390f35b6100f460048036038101906100ef919061081a565b61037e565b604051610101919061097a565b60405180910390f35b610124600480360381019061011f91906107c0565b6104b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561019257600080fd5b505afa1580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca91906108da565b60ff169050919050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561021d57600080fd5b505afa158015610231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025591906108da565b60ff169050600081600a6102699190610acf565b60016102759190610bed565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156102b357809250610376565b6000806102c087876104fe565b9150915060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663054d50d48484846040518463ffffffff1660e01b815260040161032193929190610a34565b60206040518083038186803b15801561033957600080fd5b505afa15801561034d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037191906108ad565b945050505b505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e757600080fd5b505afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f91906107ed565b73ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b8152600401610459929190610995565b60206040518083038186803b15801561047157600080fd5b505afa158015610485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a991906107ed565b90508091505092915050565b6000819050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080600061050d858561037e565b90506000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561055857600080fd5b505afa15801561056c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610590919061085a565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060006105c18888610614565b5090508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146105fe578183610601565b82825b8096508197505050505050509250929050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d906109d9565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106106c05782846106c3565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561073b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610732906109f9565b60405180910390fd5b9250929050565b60008135905061075181610d97565b92915050565b60008151905061076681610d97565b92915050565b60008151905061077b81610dae565b92915050565b60008151905061079081610dc5565b92915050565b6000815190506107a581610ddc565b92915050565b6000815190506107ba81610df3565b92915050565b6000602082840312156107d6576107d5610d0d565b5b60006107e484828501610742565b91505092915050565b60006020828403121561080357610802610d0d565b5b600061081184828501610757565b91505092915050565b6000806040838503121561083157610830610d0d565b5b600061083f85828601610742565b925050602061085085828601610742565b9150509250929050565b60008060006060848603121561087357610872610d0d565b5b60006108818682870161076c565b93505060206108928682870161076c565b92505060406108a386828701610796565b9150509250925092565b6000602082840312156108c3576108c2610d0d565b5b60006108d184828501610781565b91505092915050565b6000602082840312156108f0576108ef610d0d565b5b60006108fe848285016107ab565b91505092915050565b61091081610c47565b82525050565b61091f81610cba565b82525050565b6000610932602383610a6b565b915061093d82610d1f565b604082019050919050565b6000610955601c83610a6b565b915061096082610d6e565b602082019050919050565b61097481610c93565b82525050565b600060208201905061098f6000830184610907565b92915050565b60006040820190506109aa6000830185610907565b6109b76020830184610907565b9392505050565b60006020820190506109d36000830184610916565b92915050565b600060208201905081810360008301526109f281610925565b9050919050565b60006020820190508181036000830152610a1281610948565b9050919050565b6000602082019050610a2e600083018461096b565b92915050565b6000606082019050610a49600083018661096b565b610a56602083018561096b565b610a63604083018461096b565b949350505050565b600082825260208201905092915050565b6000808291508390505b6001851115610ac657808604811115610aa257610aa1610cde565b5b6001851615610ab15780820291505b8081029050610abf85610d12565b9450610a86565b94509492505050565b6000610ada82610c93565b9150610ae583610c93565b9250610b127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610b1a565b905092915050565b600082610b2a5760019050610be6565b81610b385760009050610be6565b8160018114610b4e5760028114610b5857610b87565b6001915050610be6565b60ff841115610b6a57610b69610cde565b5b8360020a915084821115610b8157610b80610cde565b5b50610be6565b5060208310610133831016604e8410600b8410161715610bbc5782820a905083811115610bb757610bb6610cde565b5b610be6565b610bc98484846001610a7c565b92509050818404811115610be057610bdf610cde565b5b81810290505b9392505050565b6000610bf882610c93565b9150610c0383610c93565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c3c57610c3b610cde565b5b828202905092915050565b6000610c5282610c73565b9050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000610cc582610ccc565b9050919050565b6000610cd782610c73565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b60008160011c9050919050565b7f50616e63616b654c6962726172793a204944454e544943414c5f41444452455360008201527f5345530000000000000000000000000000000000000000000000000000000000602082015250565b7f50616e63616b654c6962726172793a205a45524f5f4144445245535300000000600082015250565b610da081610c47565b8114610dab57600080fd5b50565b610db781610c59565b8114610dc257600080fd5b50565b610dce81610c93565b8114610dd957600080fd5b50565b610de581610c9d565b8114610df057600080fd5b50565b610dfc81610cad565b8114610e0757600080fd5b5056fea26469706673582212200ab3aaa113cde7034a4d273890b00b2efeb77441437c5e0eef1a635760efe93564736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631694505e1461005c578063966da2b81461007a578063afa99860146100aa578063b4f69a2f146100da578063c4d66de81461010a575b600080fd5b610064610126565b60405161007191906109be565b60405180910390f35b610094600480360381019061008f91906107c0565b61014a565b6040516100a19190610a19565b60405180910390f35b6100c460048036038101906100bf919061081a565b6101d4565b6040516100d19190610a19565b60405180910390f35b6100f460048036038101906100ef919061081a565b61037e565b604051610101919061097a565b60405180910390f35b610124600480360381019061011f91906107c0565b6104b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561019257600080fd5b505afa1580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca91906108da565b60ff169050919050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561021d57600080fd5b505afa158015610231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025591906108da565b60ff169050600081600a6102699190610acf565b60016102759190610bed565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156102b357809250610376565b6000806102c087876104fe565b9150915060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663054d50d48484846040518463ffffffff1660e01b815260040161032193929190610a34565b60206040518083038186803b15801561033957600080fd5b505afa15801561034d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037191906108ad565b945050505b505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e757600080fd5b505afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f91906107ed565b73ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b8152600401610459929190610995565b60206040518083038186803b15801561047157600080fd5b505afa158015610485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a991906107ed565b90508091505092915050565b6000819050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080600061050d858561037e565b90506000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561055857600080fd5b505afa15801561056c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610590919061085a565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060006105c18888610614565b5090508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146105fe578183610601565b82825b8096508197505050505050509250929050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d906109d9565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106106c05782846106c3565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561073b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610732906109f9565b60405180910390fd5b9250929050565b60008135905061075181610d97565b92915050565b60008151905061076681610d97565b92915050565b60008151905061077b81610dae565b92915050565b60008151905061079081610dc5565b92915050565b6000815190506107a581610ddc565b92915050565b6000815190506107ba81610df3565b92915050565b6000602082840312156107d6576107d5610d0d565b5b60006107e484828501610742565b91505092915050565b60006020828403121561080357610802610d0d565b5b600061081184828501610757565b91505092915050565b6000806040838503121561083157610830610d0d565b5b600061083f85828601610742565b925050602061085085828601610742565b9150509250929050565b60008060006060848603121561087357610872610d0d565b5b60006108818682870161076c565b93505060206108928682870161076c565b92505060406108a386828701610796565b9150509250925092565b6000602082840312156108c3576108c2610d0d565b5b60006108d184828501610781565b91505092915050565b6000602082840312156108f0576108ef610d0d565b5b60006108fe848285016107ab565b91505092915050565b61091081610c47565b82525050565b61091f81610cba565b82525050565b6000610932602383610a6b565b915061093d82610d1f565b604082019050919050565b6000610955601c83610a6b565b915061096082610d6e565b602082019050919050565b61097481610c93565b82525050565b600060208201905061098f6000830184610907565b92915050565b60006040820190506109aa6000830185610907565b6109b76020830184610907565b9392505050565b60006020820190506109d36000830184610916565b92915050565b600060208201905081810360008301526109f281610925565b9050919050565b60006020820190508181036000830152610a1281610948565b9050919050565b6000602082019050610a2e600083018461096b565b92915050565b6000606082019050610a49600083018661096b565b610a56602083018561096b565b610a63604083018461096b565b949350505050565b600082825260208201905092915050565b6000808291508390505b6001851115610ac657808604811115610aa257610aa1610cde565b5b6001851615610ab15780820291505b8081029050610abf85610d12565b9450610a86565b94509492505050565b6000610ada82610c93565b9150610ae583610c93565b9250610b127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610b1a565b905092915050565b600082610b2a5760019050610be6565b81610b385760009050610be6565b8160018114610b4e5760028114610b5857610b87565b6001915050610be6565b60ff841115610b6a57610b69610cde565b5b8360020a915084821115610b8157610b80610cde565b5b50610be6565b5060208310610133831016604e8410600b8410161715610bbc5782820a905083811115610bb757610bb6610cde565b5b610be6565b610bc98484846001610a7c565b92509050818404811115610be057610bdf610cde565b5b81810290505b9392505050565b6000610bf882610c93565b9150610c0383610c93565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c3c57610c3b610cde565b5b828202905092915050565b6000610c5282610c73565b9050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000610cc582610ccc565b9050919050565b6000610cd782610c73565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b60008160011c9050919050565b7f50616e63616b654c6962726172793a204944454e544943414c5f41444452455360008201527f5345530000000000000000000000000000000000000000000000000000000000602082015250565b7f50616e63616b654c6962726172793a205a45524f5f4144445245535300000000600082015250565b610da081610c47565b8114610dab57600080fd5b50565b610db781610c59565b8114610dc257600080fd5b50565b610dce81610c93565b8114610dd957600080fd5b50565b610de581610c9d565b8114610df057600080fd5b50565b610dfc81610cad565b8114610e0757600080fd5b5056fea26469706673582212200ab3aaa113cde7034a4d273890b00b2efeb77441437c5e0eef1a635760efe93564736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTokenPrice(address,address)": {
        "params": {
          "token1_address": "address of USDT token contract",
          "token_address": "address of BEP20 token contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenPrice(address,address)": {
        "notice": "Returns the USD price for a particular BEP20 token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6088,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IUniswapV2Router02)5967"
      }
    ],
    "types": {
      "t_contract(IUniswapV2Router02)5967": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      }
    }
  }
}